#!/bin/bash

app_id="__app_id__"
token="__token__"

server_id="__server_id__"
mount_point="__mount_point__"
process="__process__"
nic="__nic__"
nd_server="__nd_server__"
version="__version__"

warn_cpu=__warn_cpu__
warn_ram=__warn_ram__
warn_swap=__warn_swap__
warn_disk=__warn_disk__
warn_conn=__warn_conn__
# warn_rx=__warn_rx__
# warn_tx=__warn_tx__
warn_rx_rate=__warn_rx_rate__
warn_tx_rate=__warn_tx_rate__
monitor_mysql_slave=__monitor_mysql_slave__

uptime=$(date -u "+%Y-%m-%d %H:%M:%S" -d "`awk '{print $1}' /proc/uptime` seconds ago")

server_data=`curl -s -0 -X GET \
-H "token: ""$token" \
-H "app_id: ""$app_id" \
-F "params=$server_id" \
-F "query_params=$uptime" \
"https://"$nd_server"/api/query_server?query=1"`

if [[ -z "$server_data" ]]; then
  echo "Failed to connect to server. Trying to find a new server..."
  bash <(curl -s0 https://cdn.netdata.io/server_monitor/install.sh) "$server_id"
  echo "New server found."
  $0
  exit 0
fi

new_version=$(echo "$server_data" | jq -r .data[0].VERSION)
if (( "$new_version">"$version" )) || (( "$new_version"<0 )); then
  echo "New version found: ${new_version}. Starting update..."
  bash <(curl -s0 https://cdn.netdata.io/server_monitor/install.sh) "$server_id"
  echo "Update completed."
  $0
  exit 0
fi

last_rx=$(echo "$server_data" | jq -r .data[0].RX)
last_tx=$(echo "$server_data" | jq -r .data[0].TX)
seconds_since_last_update=$(echo "$server_data" | jq -r .data[0].SECONDS_SINCE_LAST_UPDATE)

status=''

IFS=' ' read rx tx <<< $(cat /proc/net/dev | grep "$nic" | awk -F ':' '{print $2}' | awk '{print $1,$9}')

# if (( `bc <<< "${rx} >= ${warn_rx}"` )); then
#   status="${status}rx:${rx},"
# fi

# if (( `bc <<< "${tx} >= ${warn_tx}"` )); then
#   status="${status}tx:${tx},"
# fi

rx_rate=`bc <<< "(${rx}-${last_rx})/${seconds_since_last_update}"`
tx_rate=`bc <<< "(${tx}-${last_tx})/${seconds_since_last_update}"`
rx_rate_text="$(printf '%.2f' `bc -l <<< "${rx_rate}/1048576"`)Mbps"
tx_rate_text="$(printf '%.2f' `bc -l <<< "${tx_rate}/1048576"`)Mbps"

if (( `bc <<< "${rx_rate} >= ${warn_rx_rate}"` )); then
  status="${status}rx_rate:${rx_rate_text},"
fi

if (( `bc <<< "${tx_rate} >= ${warn_tx_rate}"` )); then
  status="${status}tx_rate:${tx_rate_text},"
fi

conn=$(netstat -an | wc -l)
if (( `bc <<< "${conn} >= ${warn_conn}"` )); then
  status="${status}conn:${conn},"
fi

cpu=$(sed -n '2p' <(top -bn2 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}'))
if (( `bc <<< "${cpu} >= ${warn_cpu}"` )); then
  status="${status}cpu:${cpu}%,"
fi

if [[ -f "/usr/bin/apt-get" ]]; then
  IFS=' ' read ram_used ram_total <<< $(free | awk 'NR==3{print $3, $3+$4}')
  if (( `bc <<< "${ram_used}*100/${ram_total} >= ${warn_ram}"` )); then
    status="${status}ram:`bc<<<${ram_used}*100/${ram_total}`%,"
  fi

  IFS=' ' read swap_used swap_total <<< $(free | awk 'NR==4{print $3, $2}')
  if (( "$swap_total" > 0  )) && (( `bc <<< "${swap_used}*100/${swap_total} >= ${warn_swap}"` )); then
    status="${status}swap:`bc<<<${swap_used}*100/${swap_total}`%,"
  fi
elif [[ -f "/usr/bin/yum" ]]; then
  IFS=' ' read ram_used ram_total <<< $(free | awk 'NR==2{print $3, $2}')
  if (( `bc <<< "${ram_used}*100/${ram_total} >= ${warn_ram}"` )); then
    status="${status}ram:`bc<<<${ram_used}*100/${ram_total}`%,"
  fi

  IFS=' ' read swap_used swap_total <<< $(free | awk 'NR==3{print $3, $2}')
  if (( "$swap_total" > 0  )) && (( `bc <<< "${swap_used}*100/${swap_total} >= ${warn_swap}"` )); then
    status="${status}swap:`bc<<<${swap_used}*100/${swap_total}`%,"
  fi
fi

IFS=' ' read disk_used disk_total <<< $(df "$mount_point" | awk 'NR==2{print $3, $2}')
if (( `bc <<< "${disk_used}*100/${disk_total} >= ${warn_disk}"` )); then
  status="${status}disk:`bc<<<${disk_used}*100/${disk_total}`%,"
fi

IFS=' ' read disk_read disk_write sys_load <<< $(sed -n '4p' <(dstat -dl --nocolor 1 1) | awk -F '|' '{print $1,$2}' | awk '{print $1,$2,$3}')
disk_read="${disk_read/B/}"
disk_read="${disk_read/k/*1024}"
disk_read=`bc <<< $disk_read`
disk_write="${disk_write/B/}"
disk_write="${disk_write/k/*1024}"
disk_write=`bc <<< $disk_write`

mon_ps=''
IFS=',' read -ra arr_ps <<< "$process"
for ps in "${arr_ps[@]}"; do
  if [[ $(pidof "$ps") ]]; then
    mon_ps="${mon_ps}+${ps},"
  else
    status="${status}-${ps},"
    mon_ps="${mon_ps}-${ps},"
  fi
done

if [[ "$monitor_mysql_slave" -eq 1 ]]; then
  mysql_slave_data=$(mysql -se "SHOW SLAVE STATUS\G" | grep "Seconds_Behind_Master:\|Running:\|Slave_SQL_Running_State:")
  line1=`sed '1q;d' <(echo "$mysql_slave_data")`
  line1=`sed -e 's/[[:space:]]*$//' <<<${line1}`
  slave_io_running=`sed -e 's/[[:space:]]*$//' <<<${line1##*:}`
  line2=`sed '2q;d' <(echo "$mysql_slave_data")`
  line2=`sed -e 's/[[:space:]]*$//' <<<${line2}`
  slave_sql_running=`sed -e 's/[[:space:]]*$//' <<<${line2##*:}`
  line3=`sed '3q;d' <(echo "$mysql_slave_data")`
  line3=`sed -e 's/[[:space:]]*$//' <<<${line3}`
  seconds_behind_master=`sed -e 's/[[:space:]]*$//' <<<${line3##*:}`
  if [[ "$slave_io_running" != "Yes" ]]; then
    status="${status}${line1},"
  fi
  if [[ "$slave_sql_running" != "Yes" ]]; then
    status="${status}${line2},"
  fi
  if [[ "$seconds_behind_master" > 5 ]]; then
    status="${status}${line3},"
  fi
  if [[ "$slave_io_running" != "Yes" ]] || [[ "$slave_sql_running" != "Yes" ]] || [[ "$seconds_behind_master" > 5 ]]; then
    line4=`sed '4q;d' <(echo "$mysql_slave_data")`
    line4=`sed -e 's/[[:space:]]*$//' <<<${line4}`
    slave_sql_running_state=`sed -e 's/[[:space:]]*$//' <<<${line4##*:}`
    status="${status}${slave_sql_running_state},"
  fi
fi

status_code=0
if [[ "$status" != "" ]]; then
  status_code=1
fi

curl -s0 -X POST \
-H "token: ""$token" \
-H "app_id: ""$app_id" \
-F "query_params=$server_id" \
-F "params="$server_id","\
"$cpu"","\
"$ram_used"","\
"$ram_total"","\
"$swap_used"","\
"$swap_total"","\
"$disk_used"","\
"$disk_total"","\
"$disk_read"","\
"$disk_write"","\
"$sys_load"","\
"$rx"","\
"$tx"","\
"$rx_rate"","\
"$tx_rate"","\
"$uptime"","\
"$conn"","\
"'$mon_ps',"\
"'$status_code',"\
"'$status',"\
"$server_id"","\
"$rx"","\
"$tx"","\
"$rx"","\
"$tx"","\
"$version"","\
"$server_id"","\
"$server_id" \
"https://"$nd_server"/api/insert_server_monitor?exec=1"