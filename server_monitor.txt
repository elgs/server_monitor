#!/bin/bash

app_id="__app_id__"
token="__token__"

server_id="__server_id__"
mount_point="__mount_point__"
process="__process__"
nic="__nic__"
nd_server="__nd_server__"
version="__version__"

warn_cpu=__warn_cpu__
warn_ram=__warn_ram__
warn_swap=__warn_swap__
warn_disk=__warn_disk__
warn_conn=__warn_conn__
warn_rx=__warn_rx__
warn_tx=__warn_tx__
warn_rx_rate=__warn_rx_rate__
warn_tx_rate=__warn_tx_rate__

server_data=`curl -s -0 -X GET \
-H "token: ""$token" \
-H "app_id: ""$app_id" \
-F "params=$server_id" \
"https://"$nd_server"/api/query_server?query=1"`

new_version=$(echo "$server_data" | jq -r .data[0].VERSION)
if (( `bc <<< "${new_version}>${version}"` )) || (( `bc <<< "${new_version}<0"` )); then
  echo "New version found: ${new_version}. Starting update..."
  bash <(curl -s0 https://raw.githubusercontent.com/elgs/server_monitor/master/uninstall.sh)
  bash <(curl -s0 https://raw.githubusercontent.com/elgs/server_monitor/master/install.sh) "$server_id"
  echo "Update completed."
  exit 0
fi

last_rx=$(echo "$server_data" | jq -r .data[0].RX)
last_tx=$(echo "$server_data" | jq -r .data[0].TX)
seconds_since_last_update=$(echo "$server_data" | jq -r .data[0].SECONDS_SINCE_LAST_UPDATE)

status=''

IFS=' ' read rx tx <<< $(cat /proc/net/dev | grep "$nic" | awk -F ':[ \t]*|[ \t]+' '{print $3,$11}') 

if (( `bc <<< "${rx} >= ${warn_rx}"` )); then
  status="${status}rx:${rx},"
fi

if (( `bc <<< "${tx} >= ${warn_tx}"` )); then
  status="${status}tx:${tx},"
fi

rx_rate=`bc <<< "(${rx}-${last_rx})/${seconds_since_last_update}"`
tx_rate=`bc <<< "(${tx}-${last_tx})/${seconds_since_last_update}"`

if (( `bc <<< "${rx_rate} >= ${warn_rx_rate}"` )); then
  status="${status}rx_rate:${rx_rate},"
fi

if (( `bc <<< "${tx_rate} >= ${warn_tx_rate}"` )); then
  status="${status}tx_rate:${tx_rate},"
fi

conn=$(netstat -an | wc -l)
if (( `bc <<< "${conn} >= ${warn_conn}"` )); then
  status="${status}conn:${conn},"
fi

uptime=$(date -u "+%Y-%m-%d %H:%M:%S" -d "`awk '{print $1}' /proc/uptime` seconds ago")

cpu=$(sed -n '2p' <(top -bn2 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1}'))
if (( `bc <<< "${cpu} >= ${warn_cpu}"` )); then
  status="${status}cpu:${cpu},"
fi

IFS=' ' read ram_used ram_total <<< $(free | awk 'NR==3{print $3, $3+$4}')
if (( `bc <<< "${ram_used}*100/${ram_total} >= ${warn_ram}"` )); then
  status="${status}ram:`bc<<<${ram_used}*100/${ram_total}`,"
fi

IFS=' ' read swap_used swap_total <<< $(free | awk 'NR==4{print $3, $2}')
if (( "$swap_total" > 0  )) && (( `bc <<< "${swap_used}*100/${swap_total} >= ${warn_swap}"` )); then
  status="${status}swap:`bc<<<${swap_used}*100/${swap_total}`,"
fi

IFS=' ' read disk_used disk_total <<< $(df "$mount_point" | awk 'NR==2{print $3, $2}')
if (( `bc <<< "${disk_used}*100/${disk_total} >= ${warn_disk}"` )); then
  status="${status}disk:`bc<<<${disk_used}*100/${disk_total}`,"
fi

mon_ps=''
IFS=',' read -ra arr_ps <<< "$process"
for ps in "${arr_ps[@]}"; do
  if [[ $(pidof "$ps") ]]; then
    mon_ps="${mon_ps}+${ps},"
  else
    status="${status}-${ps},"
    mon_ps="${mon_ps}-${ps},"
  fi
done

curl -s -0 -X POST \
-H "token: ""$token" \
-H "app_id: ""$app_id" \
-F "params="$server_id","\
"$cpu"","\
"$ram_used"","\
"$ram_total"","\
"$swap_used"","\
"$swap_total"","\
"$disk_used"","\
"$disk_total"","\
"$rx"","\
"$tx"","\
"$rx_rate"","\
"$tx_rate"","\
"$uptime"","\
"$conn"","\
"'$mon_ps',"\
"'$status',"\
"$server_id"","\
"$rx"","\
"$tx"","\
"$rx"","\
"$tx"","\
"$server_id"","\
"$server_id" \
"https://"$nd_server"/api/insert_server_monitor?exec=1"